#!/bin/bash

DOCKER_CMD="docker"

if [ "$(which docker-machine)" != "" ];then
	DOCKER_MACHINE_NAME="default"
	DOCKER_CMD="docker $(docker-machine config ${DOCKER_MACHINE_NAME})"
fi

# This allows us to change the root of dyndocker
# Useful when using VBox for Win and MacOSX by working inside the Virtual Box
# at the same place than outside the Virtual Box
DYNDOCKER_ROOT_FILE="$HOME/.dyndocker_root"
if [ -f "$DYNDOCKER_ROOT_FILE" ];then
	DYNDOCKER_ROOT=`cat $DYNDOCKER_ROOT_FILE`
else
	DYNDOCKER_ROOT="$HOME"
fi

DYNDOCKER_HOME="$DYNDOCKER_ROOT/.dyndocker"
DYNDOCKER_HOME_DOC="$DYNDOCKER_ROOT/dyndocker"



DYNDOCKER_LIBRARY="$DYNDOCKER_HOME/library"

if [ ! -d "$DYNDOCKER_HOME_DOC" ]; then
	mkdir -p "$DYNDOCKER_HOME_DOC"
fi
if [ ! -d "$DYNDOCKER_LIBRARY" ];then
	mkdir -p "$DYNDOCKER_LIBRARY"
fi

DYNDOCKER_DEFAULT_CONTAINER="$DYNDOCKER_HOME/.default"

if [ -f "$DYNDOCKER_DEFAULT_CONTAINER" ];then
	DYNDOCKER_CONTAINER=`cat $DYNDOCKER_DEFAULT_CONTAINER`
else 
	DYNDOCKER_CONTAINER="dyndocker"
fi

cmd="$1"

if [ "$cmd" = "" ]; then
	cmd="--help"
fi

# see https://www.wanadev.fr/docker-vivre-avec-une-baleine-partie-2/
# no more use of "docker run -d" but "docker create" and then docker start|stop|restart

create_dyndoc_container() {
	tag="latest"
	if [ "$1" != "" ]; then tag="$1"; fi
	${DOCKER_CMD} create \
		-p 7777:7777 \
		-v ${DYNDOCKER_HOME_DOC}:/dyndoc-proj \
		-v ${DYNDOCKER_LIBRARY}:/dyndoc-library \
		-t -i --name dyndocker \
		rcqls/${DYNDOCKER_CONTAINER}:${tag}
}

create_pdflatex_container() {
	tag="latest"
	if [ "$1" != "latest" ]; then tag="$1"; fi
	${DOCKER_CMD} create \
		-v ${DYNDOCKER_HOME_DOC}:/dyndoc-proj \
		-t -i --name dyndocker-pdflatex \
		rcqls/dyndocker-pdflatex:${tag}

	# the following wrapper allows us to compile a file giving its name relatively to the dyndocker home root
	echo "Create pdflatex wrapper to use inside container"
	echo '#!/bin/bash' > ${DYNDOCKER_HOME_DOC}/.pdflatex.sh
	echo 'filename="${@: -1}";dirname=`dirname ${filename}`;basename=`basename ${filename} .tex`;length=$(($#-1));pdflatex_options="${@:1:$length}"' >> ${DYNDOCKER_HOME_DOC}/.pdflatex.sh
	echo 'cd /dyndoc-proj/$dirname' >> ${DYNDOCKER_HOME_DOC}/.pdflatex.sh
	echo 'pdflatex $pdflatex_options $basename' >> ${DYNDOCKER_HOME_DOC}/.pdflatex.sh
}

remove_container() {
	if [ "$1" = "" ];then
		CONTAINER="dyndocker"
	else 
		if [ "$1" = "pdflatex" ];then
			CONTAINER="dyndocker-pdflatex"
		fi
	fi
	if [ "$CONTAINER" != "" ];then
		${DOCKER_CMD} stop $CONTAINER
		${DOCKER_CMD} rm $CONTAINER
	fi
}

set_default() {
	if [ "$1" = "dyndocker-julia" ] || [ "$1" = "dyndocker" ] ;then
		DEFAULT="$1"
	fi
	if [ "$DEFAULT" != "" ]; then
		echo "WARNING: $DYNDOCKER_HOME/.default changed!"
		echo "$DEFAULT" > "$DYNDOCKER_HOME/.default"
	fi
}

load_image() {
	if [ "$1" = "" ];then
		IMAGE="dyndocker"
		set_default "dyndocker"
	else 
		if [ "$1" = "julia" ];then
			IMAGE="dyndocker-julia"
			set_default "dyndocker-julia"
		fi
		if [ "$1" = "pdflatex" ];then
			IMAGE="dyndocker-pdflatex"
		fi
	fi
	if [ "$IMAGE" != "" ];then
		IMAGE_TGZ="/$IMAGE.tar.gz"
		if [ -f "$IMAGE_TGZ" ]; then 
			${DOCKER_CMD} load -i ${IMAGE_TGZ}
		fi
	fi
}


start_container() {
	if [ "$1" = "" ];then
		CONTAINER="dyndocker"
	else 
		if [ "$1" = "pdflatex" ];then
			CONTAINER="dyndocker-pdflatex"
		fi
	fi
	if [ "$CONTAINER" != "" ];then
		${DOCKER_CMD} start $CONTAINER
	fi
}

stop_container() {
	if [ "$1" = "" ];then
		CONTAINER="dyndocker"
	else 
		if [ "$1" = "pdflatex" ];then
			CONTAINER="dyndocker-pdflatex"
		fi
	fi
	if [ "$CONTAINER" != "" ];then
		${DOCKER_CMD} stop $CONTAINER
	fi
}

restart_container() {
	if [ "$1" = "" ];then
		CONTAINER="dyndocker"
	else 
		if [ "$1" = "pdflatex" ];then
			CONTAINER="dyndocker-pdflatex"
		fi
	fi
	if [ "$CONTAINER" != "" ];then
		${DOCKER_CMD} restart $CONTAINER
	fi
}

pdflatex-wrap() {
	filename="${@: -1}"
	dirname=`dirname ${filename}`
	basename=`basename ${filename} .tex`
	length=$(($#-1))
	pdflatex_options="${@:1:$length}" #all but last
	if [ "$(which pdflatex)" = "" ]; then
		${DOCKER_CMD} exec -ti dyndocker-pdflatex /bin/bash -i /dyndoc-proj/.pdflatex.sh $pdflatex_options $filename
	else
		owd="$(pwd)"
		wd="${DYNDOCKER_HOME_DOC}/${dirname}"
		cd ${wd}
		pdflatex ${pdflatex_options} ${basename}
		cd "${owd}"
	fi
}

update_dyndoc() {
	echo "dyndoc_tmp=/.dyndoc_install_tmp" > ${DYNDOCKER_HOME_DOC}/.dyndoc_update.sh
	echo 'mkdir -p $dyndoc_tmp' >> ${DYNDOCKER_HOME_DOC}/.dyndoc_update.sh
	echo 'echo GEM_PATH=$GEM_PATH' >> ${DYNDOCKER_HOME_DOC}/.dyndoc_update.sh
	if [ "$1" = "core" ] || [ "$1" = "" ];then
		echo 'cd $dyndoc_tmp' >> ${DYNDOCKER_HOME_DOC}/.dyndoc_update.sh
		echo 'git clone https://github.com/rcqls/dyndoc-ruby-core.git' >> ${DYNDOCKER_HOME_DOC}/.dyndoc_update.sh
		echo 'cd dyndoc-ruby-core;rake docker'>> ${DYNDOCKER_HOME_DOC}/.dyndoc_update.sh
	fi
	if [ "$1" = "doc" ] || [ "$1" = "" ];then
		echo 'cd $dyndoc_tmp' >> ${DYNDOCKER_HOME_DOC}/.dyndoc_update.sh
		echo 'git clone https://github.com/rcqls/dyndoc-ruby-doc.git' >> ${DYNDOCKER_HOME_DOC}/.dyndoc_update.sh
		echo 'cd dyndoc-ruby-doc;rake docker'>> ${DYNDOCKER_HOME_DOC}/.dyndoc_update.sh
	fi
	if [ "$1" = "bin" ] || [ "$1" = "" ];then
		echo 'cd $dyndoc_tmp' >> ${DYNDOCKER_HOME_DOC}/.dyndoc_update.sh
		echo 'git clone https://github.com/rcqls/dyndoc-ruby-install.git' >> ${DYNDOCKER_HOME_DOC}/.dyndoc_update.sh
		echo 'cp -r ./dyndoc-ruby-install/dyndoc_basic_root_structure/* /dyndoc'>> ${DYNDOCKER_HOME_DOC}/.dyndoc_update.sh
	fi
	echo 'rm -fr $dyndoc_tmp' >> ${DYNDOCKER_HOME_DOC}/.dyndoc_update.sh
	${DOCKER_CMD} exec -ti dyndocker /bin/bash -i /dyndoc-proj/.dyndoc_update.sh
}

case "$cmd" in
--help)
	echo "dyndocker [cmd] [options]"
	echo "Different choices of <cmd> are:"
	echo "	-> dyndocker [start|stop|restart] [pdflatex]: to start, stop or restart dyndocker (or pdflatex) container"
	echo "	-> dyndocker default [container]: set or get default dyndocker container name"
	;;
create | new)
	shift
	if [ "$1" = "pdflatex" ];then
		shift
		create_pdflatex_container $*
	else
		create_dyndoc_container $*
	fi
	;;
start)
	shift
	start_container $*
	;;
stop)
	shift
	stop_container $*
	;;
restart)
	shift
	restart_container $*
	;;
remove | delete | rm)
	shift
	remove_container $*
	;;
default)
	shift
	if [ "$1" = "" ];then
		echo "Default dyndocker container is $(cat $DYNDOCKER_HOME/.default)"
	else
		set_default $1
	fi
	;;
load-image)
	shift
	load_image $*
	;;
R | irb  | gem | ruby) 
	shift
	${DOCKER_CMD} exec -ti dyndocker $cmd $*
	;;
bash)
	${DOCKER_CMD} exec -ti dyndocker /bin/bash
	;;
pdflatex)
	shift
	if [ "$1" = "" ]; then
		${DOCKER_CMD} exec -ti dyndocker-pdflatex /bin/bash
	else
		pdflatex-wrap $*
	fi
	;;
build)
	shift
	filename="${@: -1}"
	dirname=`dirname ${filename}`
	basename=`basename ${filename} .dyn`
	length=$(($#-1))
	dyn_options="${@:1:$length}" #all but last
	${DOCKER_CMD} exec dyndocker dyn --docker $dyn_options /dyndoc-proj/$filename
	pdflatex-wrap $dirname/$basename.tex
	;;
update-client)
	old="$(pwd)"
	cd "$DYNDOCKER_HOME/install/dyndocker"
	git pull
	cp client/dyndocker ../../bin
	cd $old
	;;
update-dyndoc)
	shift
	update_dyndoc $1
	;;
esac
